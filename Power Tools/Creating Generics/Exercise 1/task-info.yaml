type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 102
    length: 203
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 101
    initialized_from_dependency: false
    selected: false
    status: Solved
    encrypted_possible_answer: |-
      fun interface Items<T> {
        fun next(): T?
      }

      fun <T> itemIter(vararg items: T): Items<T> {
        var index = 0
        return Items {
          if (index >= items.size) null
          else items[index++]
        }
      }
  - offset: 320
    length: 201
    placeholder_text: |-
      /*
        val s = itemIter("A", "B", "C")
        (0..3).map { s.next() } eq "[A, B, C, null]"
        val i = itemIter(1, 2, 3, 4, 5, 6, 7)
        (0..10).mapNotNull { i.next() } eq
          "[1, 2, 3, 4, 5, 6, 7]"
      */
    initial_state:
      length: 191
      offset: 123
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |2-
        val s = itemIter("A", "B", "C")
        (0..3).map { s.next() } eq "[A, B, C, null]"
        val i = itemIter(1, 2, 3, 4, 5, 6, 7)
        (0..10).mapNotNull { i.next() } eq
          "[1, 2, 3, 4, 5, 6, 7]"
  text: |-
    // CreatingGenerics/CreatingGenericsSoln1.kt
    package creatingGenericsExercise1
    import atomictest.eq

    // TODO

    fun main() {
    /*
      val s = itemIter("A", "B", "C")
      (0..3).map { s.next() } eq "[A, B, C, null]"
      val i = itemIter(1, 2, 3, 4, 5, 6, 7)
      (0..10).mapNotNull { i.next() } eq
        "[1, 2, 3, 4, 5, 6, 7]"
    */
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package creatingGenericsExercise1

    import org.junit.Test
    import util.unimplementedTest

    class TestCreatingGenericsExercise1 {
        @Test fun testSolution() {
            unimplementedTest()
        }
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 16 Jul 2021 08:07:06 UTC
record: -1
