type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 1346
    length: 22
    placeholder_text: println("Database Problem $e")
    initial_state:
      length: 30
      offset: 1272
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: logger.error("$e")
  - offset: 1448
    length: 160
    placeholder_text: |-
      catch (e: NetworkFail) {
            println("Network Problem $e")
            return Failed
          } catch (e: DBWriteFail) {
            println("Database Write Failed $e")
            return Failed
          }
    initial_state:
      length: 179
      offset: 1448
    initialized_from_dependency: false
    selected: false
    status: Solved
    encrypted_possible_answer: |-
      catch (e: Except) {
            logger.error("$e")
            return Failed
          }
  - offset: 1729
    length: 42
    placeholder_text: println("Network Close Failed $e")
    initial_state:
      length: 34
      offset: 1724
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: logger.error("$e")
  - offset: 2070
    length: 24
    placeholder_text: println("Database Problem $e")
    initial_state:
      length: 30
      offset: 1993
    initialized_from_dependency: false
    selected: false
    status: Solved
    encrypted_possible_answer: logger.error("$e")
  text: |-
    // Logging/LoggingSoln2.kt
    package loggingExercise2
    import atomictest.eq
    import atomiclog.Logger
    import loggingExercise2.Status.*

    open class Except : Exception() {
      override fun toString() =
        "${this::class.simpleName}"
    }

    open class DBFail : Except()
    class DBOpenFail : DBFail()
    class DBWriteFail : DBFail()
    class DBCloseFail : DBFail()

    class DataBase {
      fun open(id: Int, level: Int) {
        if (id == level) throw DBOpenFail()
      }
      fun write(s: String, id: Int, level: Int) {
        if (id == level) throw DBWriteFail()
      }
      fun close(id: Int, level: Int) {
        if (id == level) throw DBCloseFail()
      }
    }

    open class NetworkFail : Except()
    class NetworkOpenFail : NetworkFail()
    class NetworkCloseFail : NetworkFail()

    class NetConnection(val url: String) {
      fun open(id: Int, level: Int) {
        if (id == level) throw NetworkOpenFail()
      }
      fun read() = "Dummy Data"
      fun close(id: Int, level: Int) {
        if (id == level) throw NetworkCloseFail()
      }
    }

    enum class Status { Success, Failed }

    private val logger = Logger("LoggingSoln2.txt")

    fun transact(level: Int): Status {
      val db = DataBase()
      val nets = listOf(
        NetConnection("AtomicKotlin.com"),
        NetConnection("RickAndMorty.com")
      )
      try {
        db.open(1, level)
      } catch (e: DBOpenFail) {
        println("Database Problem $e")
        return Failed
      }
      fun transfer(net: NetConnection): Status {
        try {
          net.open(2, level)
          db.write(net.read(), 3, level)
        } catch (e: NetworkFail) {
          println("Network Problem $e")
          return Failed
        } catch (e: DBWriteFail) {
          println("Database Write Failed $e")
          return Failed
        } finally {
          try {
            net.close(4, level)
          } catch (e: NetworkCloseFail) {
            println("Network Close Failed $e")
            return Failed
          }
        }
        return Success
      }
      try {
        nets.forEach {
          if (transfer(it) == Failed)
            return Failed
        }
      } finally {
        try {
          db.close(5, level)
        } catch (e: DBCloseFail) {
          println("Database Problem $e")
          throw e
        }
      }
      return Success
    }

    fun main() {
      for (level in 0..5)
        try {
          transact(level)
        } catch (e: Except) {
          logger.error("main(): $e")
        }
      logger.logFile.readText() eq
      """
      Error: DBOpenFail
      Error: NetworkOpenFail
      Error: DBWriteFail
      Error: NetworkCloseFail
      Error: DBCloseFail
      Error: main(): DBCloseFail
      """
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package loggingExercise2

    import org.junit.Test
    import util.unimplementedTest

    class TestLoggingExercise2 {
        @Test fun testSolution() {
            unimplementedTest()
        }
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 15 Jul 2021 12:14:33 UTC
record: -1
